import xarray as xr
import matplotlib.pyplot as plt
import matplotlib as mpl
import os
import numpy as np
import pandas as pd
from netCDF4 import Dataset
from wrf import getvar, interplevel, ALL_TIMES

runame = 'CordexSA_weathermode'
path = '/short/w97/dc8106/WRF/WRFV3/run'
wrf = path+'/wrfout_d01_2012-08-27_00:00:00'
w = xr.open_dataset(wrf)
wrfin = Dataset(wrf)

#Get pressure
p = getvar(wrfin, "pressure", ALL_TIMES)
p.shape

#Get temperature in levels
t = getvar(wrfin, 'temp', ALL_TIMES)
t.shape

#get temperature at 500hPa
t500 = interplevel(t, p, 500)
t500.attrs['description'] = 'Temp at 500.0 hPa'

t500 = t500.reset_coords(names='XTIME',drop=True)
del t500.attrs['coordinates']
t500.attrs['projection'] = 'Mercator'
t500_nc = t500.to_netcdf('/g/data3/w97/dc8106/WRF_runs/Era-Interim/t500_wrf_'+runame+'.nc')

#Get geopotential height at 500hPa
#ht = getvar(wrfin, "z", units="dm")
#ht_500 = interplevel(ht, p, 500.0)


#ERAI data
path_era = '/g/data1/ub4/erai/netcdf'
erai_an = path_era+'/6hr/atmos/oper_an_pl/v01/ta/ta_6hrs_ERAI_historical_an-pl_20120*.nc'
o = xr.open_mfdataset(erai_an)
ofield = 'ta'

start_period = '27-08-2012'
end_period = '30-09-2012'
#Define min and max coordinates based on WRF output
latmin = w.XLAT.values.min()
latmax = w.XLAT.values.max()
lonmin = w.XLONG.values.min()
lonmax = w.XLONG.values.max()

latbounds = [ latmin, latmax ]
lonbounds = [ lonmin , lonmax ]  
lats = o.variables['lat'][:] 
lons = o.variables['lon'][:]

# latitude lower and upper index 
latli = int(np.argmin( np.abs( lats - latbounds[0] ) ))
latui = int(np.argmin( np.abs( lats - latbounds[1] ) ))

# longitude lower and upper index
lonli = int(np.argmin( np.abs( lons - lonbounds[0] ) ))
lonui = int(np.argmin( np.abs( lons - lonbounds[1] ) ))

#INSERT MANUALLY VARIABLE
# Extract CORDEX subset from Era-Interim and days of the month choosen (time, latitude, longitude). Note that Era-Interim counts latitude as degrees_north. Hence the upper domain values are lower array's index than lower values. Hence latui has to come first than latli as Python requires indexing to use lower indexes first.  
var_cordex = o.ta[:,:, latui:latli , lonli:lonui ].loc[start_period:end_period]
erai_cordex = '/g/data3/w97/dc8106/WRF_runs/Era-Interim/erai'+ofield+'_cordex_grid.nc'
var_cordex.to_netcdf(erai_cordex)

#Lev 15 in ERAI corresponds to 500hPa
t500_ERAI = var_cordex[:,15,:,:]

#

wvar2 = t500[0:len(w.XTIME)-1]
ovar2 = t500_ERAI.loc[start_period:end_period]

#adjust 3hr ERAI_fc_sfc data to 6hr WRF data by extracting every other datum
#ovar2 = var_cordex[0:len(var_cordex):2]


#Check time period is the same and with same spelling
ovar2.time.values
wvar2.Time.values

ovar = ovar2
wvar = wvar2

wfield = 't500'

from cdo import *
cdo = Cdo()

#create netcdf file of single variable from WRF output
w_var ='/g/data3/w97/dc8106/WRF_runs/Era-Interim/'+wfield+'_wrf_test.nc'
wvar.to_netcdf(w_var)

#Assign coordinates to netcdf file (generated by wrf-python) to be read by CDO
w_var2='/g/data3/w97/dc8106/WRF_runs/Era-Interim/t500_wrf_2.nc'
os.system('module load nco; ncatted -a coordinates,temp_interp,c,c,"XLONG XLAT" /g/data3/w97/dc8106/WRF_runs/Era-Interim/t500_wrf_test.nc /g/data3/w97/dc8106/WRF_runs/Era-Interim/t500_wrf_2.nc')

interp_name = 'interp_to_ei_grid'
cdo.remapnn(erai_cordex, input = w_var2, output = wfield+'_'+interp_name+'.nc', options = '-f nc')
